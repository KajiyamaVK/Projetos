{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import React from'react';import ReactNative from\"react-native-web/dist/index\";import PropTypes from'prop-types';var NativeModules=ReactNative.NativeModules,processColor=ReactNative.processColor,requireNativeComponent=ReactNative.requireNativeComponent,View=ReactNative.View;var RNSpinkit=null;var Spinkit=function(_React$Component){_inherits(Spinkit,_React$Component);var _super=_createSuper(Spinkit);function Spinkit(){_classCallCheck(this,Spinkit);return _super.apply(this,arguments);}_createClass(Spinkit,[{key:\"render\",value:function render(){if(!this.props.isVisible)return React.createElement(View,null);var size={height:this.props.size,width:this.props.size};var colorNumber=processColor(this.props.color);return React.createElement(RNSpinkit,{type:String(this.props.type),size:parseInt(this.props.size),color:colorNumber,style:[size,this.props.style]});}}]);return Spinkit;}(React.Component);Spinkit.propTypes={type:PropTypes.string,color:PropTypes.oneOfType([PropTypes.string,PropTypes.number]),size:PropTypes.number,isVisible:PropTypes.bool,testID:PropTypes.string,accessibilityComponentType:PropTypes.string,accessibilityLabel:PropTypes.string,accessibilityLiveRegion:PropTypes.string,renderToHardwareTextureAndroid:PropTypes.bool,importantForAccessibility:PropTypes.string,onLayout:PropTypes.func};Spinkit.defaultProps={size:37,color:\"#000000\",isVisible:true};NativeModules.RNSpinkit;RNSpinkit=requireNativeComponent('RNSpinkit',Spinkit,{nativeOnly:{'nativeID':true}});module.exports=Spinkit;","map":{"version":3,"sources":["C:/Rep/Projetos/Fidelity/node_modules/react-native-spinkit/index.js"],"names":["React","ReactNative","PropTypes","NativeModules","processColor","requireNativeComponent","View","RNSpinkit","Spinkit","props","isVisible","size","height","width","colorNumber","color","String","type","parseInt","style","Component","propTypes","string","oneOfType","number","bool","testID","accessibilityComponentType","accessibilityLabel","accessibilityLiveRegion","renderToHardwareTextureAndroid","importantForAccessibility","onLayout","func","defaultProps","nativeOnly","module","exports"],"mappings":"ggCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,MACOC,CAAAA,W,mCACP,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,C,GAGCC,CAAAA,a,CAIGF,W,CAJHE,a,CACAC,Y,CAGGH,W,CAHHG,Y,CACAC,sB,CAEGJ,W,CAFHI,sB,CACAC,I,CACGL,W,CADHK,I,CAGD,GAAIC,CAAAA,SAAS,CAAG,IAAhB,C,GAEMC,CAAAA,O,kPA8BI,CACR,GAAI,CAAC,KAAKC,KAAL,CAAWC,SAAhB,CAA2B,MAAO,qBAAC,IAAD,MAAP,CAE3B,GAAIC,CAAAA,IAAI,CAAG,CAACC,MAAM,CAAE,KAAKH,KAAL,CAAWE,IAApB,CAA0BE,KAAK,CAAE,KAAKJ,KAAL,CAAWE,IAA5C,CAAX,CAOA,GAAIG,CAAAA,WAAW,CAAGV,YAAY,CAAC,KAAKK,KAAL,CAAWM,KAAZ,CAA9B,CAEA,MACC,qBAAC,SAAD,EACC,IAAI,CAAEC,MAAM,CAAC,KAAKP,KAAL,CAAWQ,IAAZ,CADb,CAEC,IAAI,CAAEC,QAAQ,CAAC,KAAKT,KAAL,CAAWE,IAAZ,CAFf,CAGC,KAAK,CAAEG,WAHR,CAIC,KAAK,CAAE,CAACH,IAAD,CAAO,KAAKF,KAAL,CAAWU,KAAlB,CAJR,EADD,CAOA,C,qBAjDoBnB,KAAK,CAACoB,S,EAAtBZ,O,CAEEa,S,CAAY,CAClBJ,IAAI,CAAEf,SAAS,CAACoB,MADE,CAUlBP,KAAK,CAAEb,SAAS,CAACqB,SAAV,CAAoB,CAACrB,SAAS,CAACoB,MAAX,CAAmBpB,SAAS,CAACsB,MAA7B,CAApB,CAVW,CAWlBb,IAAI,CAAET,SAAS,CAACsB,MAXE,CAYlBd,SAAS,CAAER,SAAS,CAACuB,IAZH,CAalBC,MAAM,CAAExB,SAAS,CAACoB,MAbA,CAclBK,0BAA0B,CAAEzB,SAAS,CAACoB,MAdpB,CAelBM,kBAAkB,CAAE1B,SAAS,CAACoB,MAfZ,CAgBlBO,uBAAuB,CAAE3B,SAAS,CAACoB,MAhBjB,CAiBlBQ,8BAA8B,CAAE5B,SAAS,CAACuB,IAjBxB,CAkBlBM,yBAAyB,CAAE7B,SAAS,CAACoB,MAlBnB,CAmBlBU,QAAQ,CAAE9B,SAAS,CAAC+B,IAnBF,C,CAFdzB,O,CAwBE0B,Y,CAAe,CACrBvB,IAAI,CAAE,EADe,CAErBI,KAAK,CAAE,SAFc,CAGrBL,SAAS,CAAE,IAHU,C,CA+BvBP,aAAa,CAACI,SAAd,CAGAA,SAAS,CAAGF,sBAAsB,CACjC,WADiC,CAEjCG,OAFiC,CAG9B,CACI2B,UAAU,CAAE,CACR,WAAY,IADJ,CADhB,CAH8B,CAAlC,CAWAC,MAAM,CAACC,OAAP,CAAiB7B,OAAjB","sourcesContent":["import React from 'react'\nimport ReactNative from 'react-native'\nimport PropTypes from 'prop-types';\n\nvar {\n\tNativeModules,\n\tprocessColor,\n\trequireNativeComponent,\n\tView\n} = ReactNative;\n\nvar RNSpinkit = null;\n\nclass Spinkit extends React.Component {\n\n\tstatic propTypes = {\n\t\ttype: PropTypes.string,\n\t\t/**\n\t\t * @prop color\n\t\t * @NOTE This is typically passed as a string, but technically can also be\n\t\t *\ta number (see https://facebook.github.io/react/docs/typechecking-with-proptypes.html).\n\t\t *\tIn addition, allowing a number prop type eliminates the PropType warning\n\t\t *\tReact Native will throw if passing a string into this component but a\n\t\t *\tdifferent type (number) down to the native module.\n\t\t */\n\t\tcolor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\tsize: PropTypes.number,\n\t\tisVisible: PropTypes.bool,\n\t\ttestID: PropTypes.string,\n\t\taccessibilityComponentType: PropTypes.string,\n\t\taccessibilityLabel: PropTypes.string,\n\t\taccessibilityLiveRegion: PropTypes.string,\n\t\trenderToHardwareTextureAndroid: PropTypes.bool,\n\t\timportantForAccessibility: PropTypes.string,\n\t\tonLayout: PropTypes.func,\n\t};\n\n\tstatic defaultProps = {\n\t\tsize: 37,\n\t\tcolor: \"#000000\",\n\t\tisVisible: true\n\t};\n\n\trender() {\n\t\tif (!this.props.isVisible) return <View/>;\n\n\t\tvar size = {height: this.props.size, width: this.props.size};\n\n\t\t// In order to handle all the color specifications allowed in React Native\n\t\t// as a whole, we need to call processColor here, and can pass in the\n\t\t// resulting number directly. RCTConvert will be called on iOS to parse\n\t\t// into #AARRGGBB form; on Android, this int can be used directly for\n\t\t// setting the color.\n\t\tvar colorNumber = processColor(this.props.color);\n\n\t\treturn (\n\t\t\t<RNSpinkit\n\t\t\t\ttype={String(this.props.type)}\n\t\t\t\tsize={parseInt(this.props.size)}\n\t\t\t\tcolor={colorNumber}\n\t\t\t\tstyle={[size, this.props.style]}/>\n\t\t);\n\t}\n\n}\n\n// Since RNPM does not recognize `requireNativeComponent`, so we have to\n// add this line, and RNPM will link native modules automatically\nNativeModules.RNSpinkit;\n\n// Native component\nRNSpinkit = requireNativeComponent(\n\t'RNSpinkit',\n\tSpinkit,\n    {\n        nativeOnly: {\n            'nativeID': true\n        }\n    }\n);\n\n\nmodule.exports = Spinkit;\n"]},"metadata":{},"sourceType":"module"}